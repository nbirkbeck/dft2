template <typename T>
void dft_2_compact(const float* input, float* output, int stride=1) {
  const T i0 = SimdHelper<T>::load(input + 0 * stride);
  const T i1 = SimdHelper<T>::load(input + 1 * stride);
  SimdHelper<T>::store(output + 0 * stride, i0 +i1);
  SimdHelper<T>::store(output + 1 * stride, i0 +-i1);
}
template <typename T>
void dft_4_compact(const float* input, float* output, int stride=1) {
  const T i0 = SimdHelper<T>::load(input + 0 * stride);
  const T i1 = SimdHelper<T>::load(input + 1 * stride);
  const T i2 = SimdHelper<T>::load(input + 2 * stride);
  const T i3 = SimdHelper<T>::load(input + 3 * stride);
  const T w0  = i0 +i2;
  const T w1  = i0 +-i2;
  const T w2  = i1 +i3;
  const T w3  = i1 +-i3;
  SimdHelper<T>::store(output + 0 * stride, w0 +w2);
  SimdHelper<T>::store(output + 1 * stride, w1);
  SimdHelper<T>::store(output + 2 * stride, w0 +-w2);
  SimdHelper<T>::store(output + 3 * stride, -w3);
}
template <typename T>
void dft_8_compact(const float* input, float* output, int stride=1) {
  const T kWeight2 = SimdHelper<T>::constant(0.707107);
  const T i0 = SimdHelper<T>::load(input + 0 * stride);
  const T i1 = SimdHelper<T>::load(input + 1 * stride);
  const T i2 = SimdHelper<T>::load(input + 2 * stride);
  const T i3 = SimdHelper<T>::load(input + 3 * stride);
  const T i4 = SimdHelper<T>::load(input + 4 * stride);
  const T i5 = SimdHelper<T>::load(input + 5 * stride);
  const T i6 = SimdHelper<T>::load(input + 6 * stride);
  const T i7 = SimdHelper<T>::load(input + 7 * stride);
  const T w0  = i0 +i4;
  const T w1  = i0 +-i4;
  const T w2  = i2 +i6;
  const T w3  = i2 +-i6;
  const T w4  = w0 +w2;
  const T w5  = w0 +-w2;
  const T w6[2]  =  {w1, -w3};
  const T w7  = i1 +i5;
  const T w8  = i1 +-i5;
  const T w9  = i3 +i7;
  const T w10  = i3 +-i7;
  const T w11  = w7 +w9;
  const T w12  = w7 +-w9;
  const T w13[2]  =  {w8, -w10};
  SimdHelper<T>::store(output + 0 * stride, w4 +w11);
  SimdHelper<T>::store(output + 1 * stride, w6[0] +( kWeight2*w13[0] - -kWeight2*w13[1]));
  SimdHelper<T>::store(output + 2 * stride, w5);
  SimdHelper<T>::store(output + 3 * stride, w6[0] +(-kWeight2*w13[0] -  kWeight2*w13[1]));
  SimdHelper<T>::store(output + 4 * stride, w4 +-w11);
  SimdHelper<T>::store(output + 5 * stride, w6[1] +( kWeight2*w13[1] + -kWeight2*w13[0]));
  SimdHelper<T>::store(output + 6 * stride, -w12);
  SimdHelper<T>::store(output + 7 * stride, -w6[1] +-(-kWeight2*w13[1] +  kWeight2*w13[0]));
}
template <typename T>
void dft_16_compact(const float* input, float* output, int stride=1) {
  const T kWeight2 = SimdHelper<T>::constant(0.707107);
  const T kWeight3 = SimdHelper<T>::constant(0.92388);
  const T kWeight4 = SimdHelper<T>::constant(0.382683);
  const T i0 = SimdHelper<T>::load(input + 0 * stride);
  const T i1 = SimdHelper<T>::load(input + 1 * stride);
  const T i2 = SimdHelper<T>::load(input + 2 * stride);
  const T i3 = SimdHelper<T>::load(input + 3 * stride);
  const T i4 = SimdHelper<T>::load(input + 4 * stride);
  const T i5 = SimdHelper<T>::load(input + 5 * stride);
  const T i6 = SimdHelper<T>::load(input + 6 * stride);
  const T i7 = SimdHelper<T>::load(input + 7 * stride);
  const T i8 = SimdHelper<T>::load(input + 8 * stride);
  const T i9 = SimdHelper<T>::load(input + 9 * stride);
  const T i10 = SimdHelper<T>::load(input + 10 * stride);
  const T i11 = SimdHelper<T>::load(input + 11 * stride);
  const T i12 = SimdHelper<T>::load(input + 12 * stride);
  const T i13 = SimdHelper<T>::load(input + 13 * stride);
  const T i14 = SimdHelper<T>::load(input + 14 * stride);
  const T i15 = SimdHelper<T>::load(input + 15 * stride);
  const T w0  = i0 +i8;
  const T w1  = i0 +-i8;
  const T w2  = i4 +i12;
  const T w3  = i4 +-i12;
  const T w4  = w0 +w2;
  const T w5  = w0 +-w2;
  const T w6[2]  =  {w1, -w3};
  const T w7  = i2 +i10;
  const T w8  = i2 +-i10;
  const T w9  = i6 +i14;
  const T w10  = i6 +-i14;
  const T w11  = w7 +w9;
  const T w12  = w7 +-w9;
  const T w13[2]  =  {w8, -w10};
  const T w14  = w4 +w11;
  const T w15  = w4 +-w11;
  const T w16[2]  =  {w6[0] +( kWeight2*w13[0] - -kWeight2*w13[1]), w6[1] +( kWeight2*w13[1] + -kWeight2*w13[0])};
  const T w17[2]  =  {w5, -w12};
  const T w18[2]  =  {w6[0] +(-kWeight2*w13[0] -  kWeight2*w13[1]), -w6[1] +-(-kWeight2*w13[1] +  kWeight2*w13[0])};
  const T w19  = i1 +i9;
  const T w20  = i1 +-i9;
  const T w21  = i5 +i13;
  const T w22  = i5 +-i13;
  const T w23  = w19 +w21;
  const T w24  = w19 +-w21;
  const T w25[2]  =  {w20, -w22};
  const T w26  = i3 +i11;
  const T w27  = i3 +-i11;
  const T w28  = i7 +i15;
  const T w29  = i7 +-i15;
  const T w30  = w26 +w28;
  const T w31  = w26 +-w28;
  const T w32[2]  =  {w27, -w29};
  const T w33  = w23 +w30;
  const T w34  = w23 +-w30;
  const T w35[2]  =  {w25[0] +( kWeight2*w32[0] - -kWeight2*w32[1]), w25[1] +( kWeight2*w32[1] + -kWeight2*w32[0])};
  const T w36[2]  =  {w24, -w31};
  const T w37[2]  =  {w25[0] +(-kWeight2*w32[0] -  kWeight2*w32[1]), -w25[1] +-(-kWeight2*w32[1] +  kWeight2*w32[0])};
  SimdHelper<T>::store(output + 0 * stride, w14 +w33);
  SimdHelper<T>::store(output + 1 * stride, w16[0] +( kWeight3*w35[0] - -kWeight4*w35[1]));
  SimdHelper<T>::store(output + 2 * stride, w17[0] +( kWeight2*w36[0] - -kWeight2*w36[1]));
  SimdHelper<T>::store(output + 3 * stride, w18[0] +( kWeight4*w37[0] - -kWeight3*w37[1]));
  SimdHelper<T>::store(output + 4 * stride, w15);
  SimdHelper<T>::store(output + 5 * stride, w18[0] +(-kWeight4*w37[0] -  kWeight3*w37[1]));
  SimdHelper<T>::store(output + 6 * stride, w17[0] +(-kWeight2*w36[0] -  kWeight2*w36[1]));
  SimdHelper<T>::store(output + 7 * stride, w16[0] +(-kWeight3*w35[0] -  kWeight4*w35[1]));
  SimdHelper<T>::store(output + 8 * stride, w14 +-w33);
  SimdHelper<T>::store(output + 9 * stride, w16[1] +( kWeight3*w35[1] + -kWeight4*w35[0]));
  SimdHelper<T>::store(output + 10 * stride, w17[1] +( kWeight2*w36[1] + -kWeight2*w36[0]));
  SimdHelper<T>::store(output + 11 * stride, w18[1] +( kWeight4*w37[1] + -kWeight3*w37[0]));
  SimdHelper<T>::store(output + 12 * stride, -w34);
  SimdHelper<T>::store(output + 13 * stride, -w18[1] +-(-kWeight4*w37[1] +  kWeight3*w37[0]));
  SimdHelper<T>::store(output + 14 * stride, -w17[1] +-(-kWeight2*w36[1] +  kWeight2*w36[0]));
  SimdHelper<T>::store(output + 15 * stride, -w16[1] +-(-kWeight3*w35[1] +  kWeight4*w35[0]));
}
template <typename T>
void dft_32_compact(const float* input, float* output, int stride=1) {
  const T kWeight2 = SimdHelper<T>::constant(0.707107);
  const T kWeight3 = SimdHelper<T>::constant(0.92388);
  const T kWeight4 = SimdHelper<T>::constant(0.382683);
  const T kWeight5 = SimdHelper<T>::constant(0.980785);
  const T kWeight6 = SimdHelper<T>::constant(0.19509);
  const T kWeight7 = SimdHelper<T>::constant(0.83147);
  const T kWeight8 = SimdHelper<T>::constant(0.55557);
  const T i0 = SimdHelper<T>::load(input + 0 * stride);
  const T i1 = SimdHelper<T>::load(input + 1 * stride);
  const T i2 = SimdHelper<T>::load(input + 2 * stride);
  const T i3 = SimdHelper<T>::load(input + 3 * stride);
  const T i4 = SimdHelper<T>::load(input + 4 * stride);
  const T i5 = SimdHelper<T>::load(input + 5 * stride);
  const T i6 = SimdHelper<T>::load(input + 6 * stride);
  const T i7 = SimdHelper<T>::load(input + 7 * stride);
  const T i8 = SimdHelper<T>::load(input + 8 * stride);
  const T i9 = SimdHelper<T>::load(input + 9 * stride);
  const T i10 = SimdHelper<T>::load(input + 10 * stride);
  const T i11 = SimdHelper<T>::load(input + 11 * stride);
  const T i12 = SimdHelper<T>::load(input + 12 * stride);
  const T i13 = SimdHelper<T>::load(input + 13 * stride);
  const T i14 = SimdHelper<T>::load(input + 14 * stride);
  const T i15 = SimdHelper<T>::load(input + 15 * stride);
  const T i16 = SimdHelper<T>::load(input + 16 * stride);
  const T i17 = SimdHelper<T>::load(input + 17 * stride);
  const T i18 = SimdHelper<T>::load(input + 18 * stride);
  const T i19 = SimdHelper<T>::load(input + 19 * stride);
  const T i20 = SimdHelper<T>::load(input + 20 * stride);
  const T i21 = SimdHelper<T>::load(input + 21 * stride);
  const T i22 = SimdHelper<T>::load(input + 22 * stride);
  const T i23 = SimdHelper<T>::load(input + 23 * stride);
  const T i24 = SimdHelper<T>::load(input + 24 * stride);
  const T i25 = SimdHelper<T>::load(input + 25 * stride);
  const T i26 = SimdHelper<T>::load(input + 26 * stride);
  const T i27 = SimdHelper<T>::load(input + 27 * stride);
  const T i28 = SimdHelper<T>::load(input + 28 * stride);
  const T i29 = SimdHelper<T>::load(input + 29 * stride);
  const T i30 = SimdHelper<T>::load(input + 30 * stride);
  const T i31 = SimdHelper<T>::load(input + 31 * stride);
  const T w0  = i0 +i16;
  const T w1  = i0 +-i16;
  const T w2  = i8 +i24;
  const T w3  = i8 +-i24;
  const T w4  = w0 +w2;
  const T w5  = w0 +-w2;
  const T w6[2]  =  {w1, -w3};
  const T w7  = i4 +i20;
  const T w8  = i4 +-i20;
  const T w9  = i12 +i28;
  const T w10  = i12 +-i28;
  const T w11  = w7 +w9;
  const T w12  = w7 +-w9;
  const T w13[2]  =  {w8, -w10};
  const T w14  = w4 +w11;
  const T w15  = w4 +-w11;
  const T w16[2]  =  {w6[0] +( kWeight2*w13[0] - -kWeight2*w13[1]), w6[1] +( kWeight2*w13[1] + -kWeight2*w13[0])};
  const T w17[2]  =  {w5, -w12};
  const T w18[2]  =  {w6[0] +(-kWeight2*w13[0] -  kWeight2*w13[1]), -w6[1] +-(-kWeight2*w13[1] +  kWeight2*w13[0])};
  const T w19  = i2 +i18;
  const T w20  = i2 +-i18;
  const T w21  = i10 +i26;
  const T w22  = i10 +-i26;
  const T w23  = w19 +w21;
  const T w24  = w19 +-w21;
  const T w25[2]  =  {w20, -w22};
  const T w26  = i6 +i22;
  const T w27  = i6 +-i22;
  const T w28  = i14 +i30;
  const T w29  = i14 +-i30;
  const T w30  = w26 +w28;
  const T w31  = w26 +-w28;
  const T w32[2]  =  {w27, -w29};
  const T w33  = w23 +w30;
  const T w34  = w23 +-w30;
  const T w35[2]  =  {w25[0] +( kWeight2*w32[0] - -kWeight2*w32[1]), w25[1] +( kWeight2*w32[1] + -kWeight2*w32[0])};
  const T w36[2]  =  {w24, -w31};
  const T w37[2]  =  {w25[0] +(-kWeight2*w32[0] -  kWeight2*w32[1]), -w25[1] +-(-kWeight2*w32[1] +  kWeight2*w32[0])};
  const T w38  = w14 +w33;
  const T w39  = w14 +-w33;
  const T w40[2]  =  {w16[0] +( kWeight3*w35[0] - -kWeight4*w35[1]), w16[1] +( kWeight3*w35[1] + -kWeight4*w35[0])};
  const T w41[2]  =  {w17[0] +( kWeight2*w36[0] - -kWeight2*w36[1]), w17[1] +( kWeight2*w36[1] + -kWeight2*w36[0])};
  const T w42[2]  =  {w18[0] +( kWeight4*w37[0] - -kWeight3*w37[1]), w18[1] +( kWeight4*w37[1] + -kWeight3*w37[0])};
  const T w43[2]  =  {w15, -w34};
  const T w44[2]  =  {w18[0] +(-kWeight4*w37[0] -  kWeight3*w37[1]), -w18[1] +-(-kWeight4*w37[1] +  kWeight3*w37[0])};
  const T w45[2]  =  {w17[0] +(-kWeight2*w36[0] -  kWeight2*w36[1]), -w17[1] +-(-kWeight2*w36[1] +  kWeight2*w36[0])};
  const T w46[2]  =  {w16[0] +(-kWeight3*w35[0] -  kWeight4*w35[1]), -w16[1] +-(-kWeight3*w35[1] +  kWeight4*w35[0])};
  const T w47  = i1 +i17;
  const T w48  = i1 +-i17;
  const T w49  = i9 +i25;
  const T w50  = i9 +-i25;
  const T w51  = w47 +w49;
  const T w52  = w47 +-w49;
  const T w53[2]  =  {w48, -w50};
  const T w54  = i5 +i21;
  const T w55  = i5 +-i21;
  const T w56  = i13 +i29;
  const T w57  = i13 +-i29;
  const T w58  = w54 +w56;
  const T w59  = w54 +-w56;
  const T w60[2]  =  {w55, -w57};
  const T w61  = w51 +w58;
  const T w62  = w51 +-w58;
  const T w63[2]  =  {w53[0] +( kWeight2*w60[0] - -kWeight2*w60[1]), w53[1] +( kWeight2*w60[1] + -kWeight2*w60[0])};
  const T w64[2]  =  {w52, -w59};
  const T w65[2]  =  {w53[0] +(-kWeight2*w60[0] -  kWeight2*w60[1]), -w53[1] +-(-kWeight2*w60[1] +  kWeight2*w60[0])};
  const T w66  = i3 +i19;
  const T w67  = i3 +-i19;
  const T w68  = i11 +i27;
  const T w69  = i11 +-i27;
  const T w70  = w66 +w68;
  const T w71  = w66 +-w68;
  const T w72[2]  =  {w67, -w69};
  const T w73  = i7 +i23;
  const T w74  = i7 +-i23;
  const T w75  = i15 +i31;
  const T w76  = i15 +-i31;
  const T w77  = w73 +w75;
  const T w78  = w73 +-w75;
  const T w79[2]  =  {w74, -w76};
  const T w80  = w70 +w77;
  const T w81  = w70 +-w77;
  const T w82[2]  =  {w72[0] +( kWeight2*w79[0] - -kWeight2*w79[1]), w72[1] +( kWeight2*w79[1] + -kWeight2*w79[0])};
  const T w83[2]  =  {w71, -w78};
  const T w84[2]  =  {w72[0] +(-kWeight2*w79[0] -  kWeight2*w79[1]), -w72[1] +-(-kWeight2*w79[1] +  kWeight2*w79[0])};
  const T w85  = w61 +w80;
  const T w86  = w61 +-w80;
  const T w87[2]  =  {w63[0] +( kWeight3*w82[0] - -kWeight4*w82[1]), w63[1] +( kWeight3*w82[1] + -kWeight4*w82[0])};
  const T w88[2]  =  {w64[0] +( kWeight2*w83[0] - -kWeight2*w83[1]), w64[1] +( kWeight2*w83[1] + -kWeight2*w83[0])};
  const T w89[2]  =  {w65[0] +( kWeight4*w84[0] - -kWeight3*w84[1]), w65[1] +( kWeight4*w84[1] + -kWeight3*w84[0])};
  const T w90[2]  =  {w62, -w81};
  const T w91[2]  =  {w65[0] +(-kWeight4*w84[0] -  kWeight3*w84[1]), -w65[1] +-(-kWeight4*w84[1] +  kWeight3*w84[0])};
  const T w92[2]  =  {w64[0] +(-kWeight2*w83[0] -  kWeight2*w83[1]), -w64[1] +-(-kWeight2*w83[1] +  kWeight2*w83[0])};
  const T w93[2]  =  {w63[0] +(-kWeight3*w82[0] -  kWeight4*w82[1]), -w63[1] +-(-kWeight3*w82[1] +  kWeight4*w82[0])};
  SimdHelper<T>::store(output + 0 * stride, w38 +w85);
  SimdHelper<T>::store(output + 1 * stride, w40[0] +( kWeight5*w87[0] - -kWeight6*w87[1]));
  SimdHelper<T>::store(output + 2 * stride, w41[0] +( kWeight3*w88[0] - -kWeight4*w88[1]));
  SimdHelper<T>::store(output + 3 * stride, w42[0] +( kWeight7*w89[0] - -kWeight8*w89[1]));
  SimdHelper<T>::store(output + 4 * stride, w43[0] +( kWeight2*w90[0] - -kWeight2*w90[1]));
  SimdHelper<T>::store(output + 5 * stride, w44[0] +( kWeight8*w91[0] - -kWeight7*w91[1]));
  SimdHelper<T>::store(output + 6 * stride, w45[0] +( kWeight4*w92[0] - -kWeight3*w92[1]));
  SimdHelper<T>::store(output + 7 * stride, w46[0] +( kWeight6*w93[0] - -kWeight5*w93[1]));
  SimdHelper<T>::store(output + 8 * stride, w39);
  SimdHelper<T>::store(output + 9 * stride, w46[0] +(-kWeight6*w93[0] -  kWeight5*w93[1]));
  SimdHelper<T>::store(output + 10 * stride, w45[0] +(-kWeight4*w92[0] -  kWeight3*w92[1]));
  SimdHelper<T>::store(output + 11 * stride, w44[0] +(-kWeight8*w91[0] -  kWeight7*w91[1]));
  SimdHelper<T>::store(output + 12 * stride, w43[0] +(-kWeight2*w90[0] -  kWeight2*w90[1]));
  SimdHelper<T>::store(output + 13 * stride, w42[0] +(-kWeight7*w89[0] -  kWeight8*w89[1]));
  SimdHelper<T>::store(output + 14 * stride, w41[0] +(-kWeight3*w88[0] -  kWeight4*w88[1]));
  SimdHelper<T>::store(output + 15 * stride, w40[0] +(-kWeight5*w87[0] -  kWeight6*w87[1]));
  SimdHelper<T>::store(output + 16 * stride, w38 +-w85);
  SimdHelper<T>::store(output + 17 * stride, w40[1] +( kWeight5*w87[1] + -kWeight6*w87[0]));
  SimdHelper<T>::store(output + 18 * stride, w41[1] +( kWeight3*w88[1] + -kWeight4*w88[0]));
  SimdHelper<T>::store(output + 19 * stride, w42[1] +( kWeight7*w89[1] + -kWeight8*w89[0]));
  SimdHelper<T>::store(output + 20 * stride, w43[1] +( kWeight2*w90[1] + -kWeight2*w90[0]));
  SimdHelper<T>::store(output + 21 * stride, w44[1] +( kWeight8*w91[1] + -kWeight7*w91[0]));
  SimdHelper<T>::store(output + 22 * stride, w45[1] +( kWeight4*w92[1] + -kWeight3*w92[0]));
  SimdHelper<T>::store(output + 23 * stride, w46[1] +( kWeight6*w93[1] + -kWeight5*w93[0]));
  SimdHelper<T>::store(output + 24 * stride, -w86);
  SimdHelper<T>::store(output + 25 * stride, -w46[1] +-(-kWeight6*w93[1] +  kWeight5*w93[0]));
  SimdHelper<T>::store(output + 26 * stride, -w45[1] +-(-kWeight4*w92[1] +  kWeight3*w92[0]));
  SimdHelper<T>::store(output + 27 * stride, -w44[1] +-(-kWeight8*w91[1] +  kWeight7*w91[0]));
  SimdHelper<T>::store(output + 28 * stride, -w43[1] +-(-kWeight2*w90[1] +  kWeight2*w90[0]));
  SimdHelper<T>::store(output + 29 * stride, -w42[1] +-(-kWeight7*w89[1] +  kWeight8*w89[0]));
  SimdHelper<T>::store(output + 30 * stride, -w41[1] +-(-kWeight3*w88[1] +  kWeight4*w88[0]));
  SimdHelper<T>::store(output + 31 * stride, -w40[1] +-(-kWeight5*w87[1] +  kWeight6*w87[0]));
}
